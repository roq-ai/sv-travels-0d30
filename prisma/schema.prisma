generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  booking_time      DateTime @db.Timestamp(6)
  business_owner_id String?  @db.Uuid
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  user              user?    @relation(fields: [business_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model loyalty_program {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  program_name      String   @db.VarChar(100)
  business_owner_id String?  @db.Uuid
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  user              user?    @relation(fields: [business_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model rating {
  id                          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating                      Int
  rider_id                    String?  @db.Uuid
  driver_id                   String?  @db.Uuid
  created_at                  DateTime @default(now()) @db.Timestamp(6)
  updated_at                  DateTime @default(now()) @db.Timestamp(6)
  user_rating_driver_idTouser user?    @relation("rating_driver_idTouser", fields: [driver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_rating_rider_idTouser  user?    @relation("rating_rider_idTouser", fields: [rider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ride {
  id                        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pickup_location           String   @db.VarChar(255)
  dropoff_location          String   @db.VarChar(255)
  ride_option               String   @db.VarChar(50)
  rider_id                  String?  @db.Uuid
  driver_id                 String?  @db.Uuid
  created_at                DateTime @default(now()) @db.Timestamp(6)
  updated_at                DateTime @default(now()) @db.Timestamp(6)
  user_ride_driver_idTouser user?    @relation("ride_driver_idTouser", fields: [driver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_ride_rider_idTouser  user?    @relation("ride_rider_idTouser", fields: [rider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                         String            @unique @db.VarChar(255)
  firstName                     String?           @db.VarChar(255)
  lastName                      String?           @db.VarChar(255)
  roq_user_id                   String            @db.VarChar(255)
  tenant_id                     String            @db.VarChar(255)
  created_at                    DateTime          @default(now()) @db.Timestamp(6)
  updated_at                    DateTime          @default(now()) @db.Timestamp(6)
  booking                       booking[]
  company                       company[]
  loyalty_program               loyalty_program[]
  rating_rating_driver_idTouser rating[]          @relation("rating_driver_idTouser")
  rating_rating_rider_idTouser  rating[]          @relation("rating_rider_idTouser")
  ride_ride_driver_idTouser     ride[]            @relation("ride_driver_idTouser")
  ride_ride_rider_idTouser      ride[]            @relation("ride_rider_idTouser")
}
